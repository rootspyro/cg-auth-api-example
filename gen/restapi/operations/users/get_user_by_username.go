// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetUserByUsernameHandlerFunc turns a function with the right signature into a get user by username handler
type GetUserByUsernameHandlerFunc func(GetUserByUsernameParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetUserByUsernameHandlerFunc) Handle(params GetUserByUsernameParams) middleware.Responder {
	return fn(params)
}

// GetUserByUsernameHandler interface for that can handle valid get user by username params
type GetUserByUsernameHandler interface {
	Handle(GetUserByUsernameParams) middleware.Responder
}

// NewGetUserByUsername creates a new http.Handler for the get user by username operation
func NewGetUserByUsername(ctx *middleware.Context, handler GetUserByUsernameHandler) *GetUserByUsername {
	return &GetUserByUsername{Context: ctx, Handler: handler}
}

/*
	GetUserByUsername swagger:route GET /users/{username} Users getUserByUsername

get a single user by username
*/
type GetUserByUsername struct {
	Context *middleware.Context
	Handler GetUserByUsernameHandler
}

func (o *GetUserByUsername) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetUserByUsernameParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
